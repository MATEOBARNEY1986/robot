{"entries":[{"timestamp":1754099462507,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":185,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":201,"length1":39,"diffs":[[1,"        \"README.md\"\n"]]},{"start1":228,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"main.py","value":"from microbit import *\nimport music\n\n# === IMÁGENES DE OJOS ===\nojos_neutros = Image(\"09090:\"\n                     \"90909:\"\n                     \"00000:\"\n                     \"90009:\"\n                     \"09990\")\n\nsonrisa = Image(\"09090:\"\n                \"90909:\"\n                \"00000:\"\n                \"09990:\"\n                \"90009\")\n\nojos_tristes = Image(\"09090:\"\n                     \"90909:\"\n                     \"00000:\"\n                     \"09090:\"\n                     \"99999\")\n\nojos_cerrados = Image(\"09090:\"\n                      \"99999:\"\n                      \"00000:\"\n                      \"00000:\"\n                      \"00000\")\n\n# === CONFIGURACIÓN DE MOTORES ===\n# Pines para controlar el puente H (L298N)\nIN1 = pin0   # Motor A adelante\nIN2 = pin1   # Motor A atrás\nIN3 = pin2   # Motor B adelante\nIN4 = pin3   # Motor B atrás\n\ndef motor_adelante():\n    IN1.write_digital(1)\n    IN2.write_digital(0)\n    IN3.write_digital(1)\n    IN4.write_digital(0)\n\ndef motor_atras():\n    IN1.write_digital(0)\n    IN2.write_digital(1)\n    IN3.write_digital(0)\n    IN4.write_digital(1)\n\ndef motor_derecha():\n    IN1.write_digital(1)\n    IN2.write_digital(0)\n    IN3.write_digital(0)\n    IN4.write_digital(1)\n\ndef motor_izquierda():\n    IN1.write_digital(0)\n    IN2.write_digital(1)\n    IN3.write_digital(1)\n    IN4.write_digital(0)\n\ndef motor_detener():\n    IN1.write_digital(0)\n    IN2.write_digital(0)\n    IN3.write_digital(0)\n    IN4.write_digital(0)\n\n# === VARIABLES GLOBALES ===\nsin_sonido = 0          # contador en segundos sin sonido\nultimo_sonido = 0       # tiempo del último sonido detectado\nmodo_sueno = False      # si está \"dormido\"\ntiempo_sin_sonido_para_sueno = 10000  # 10 segundos sin sonido → modo sueño\ntiempo_fondo = 0        # para música de fondo\n\n# === SONIDOS DE FONDO ===\nsonidos_fondo = [\n    soundExpression.happy,\n    soundExpression.twinkle,\n    soundExpression.spring,\n    soundExpression.soaring\n]\n\n# Mostrar ojos neutros al inicio\ndisplay.show(ojos_neutros)\nmusic.play(music.PRELUDE)  # Saludo inicial\n\n# === BUCLE PRINCIPAL ===\nwhile True:\n    # Leer nivel de sonido (0-255)\n    nivel = microphone.current_sound_level()\n    \n    # Si hay sonido fuerte (>100), reaccionar\n    if nivel > 100:\n        ultimo_sonido = running_time()\n        modo_sueno = False\n        \n        # Mostrar sonrisa\n        display.show(sonrisa)\n        \n        # Sonido feliz\n        music.play(soundExpression.happy)\n        \n        # Mover robot un momento\n        motor_adelante()\n        sleep(1000)\n        motor_detener()\n        \n        # Volver a ojos neutros\n        display.show(ojos_neutros)\n    \n    # Verificar si debe entrar en modo sueño\n    tiempo_actual = running_time()\n    if not modo_sueno and (tiempo_actual - ultimo_sonido) > tiempo_sin_sonido_para_sueno:\n        modo_sueno = True\n        display.show(ojos_cerrados)\n        music.play(soundExpression.yawn)\n        sleep(500)\n    \n    # Modo sueño: parpadeo y ronquido de vez en cuando\n    if modo_sueno:\n        if (tiempo_actual // 1000) % 8 == 0:  # cada ~8 segundos\n            display.show(Image.SURPRISED)\n            music.play(soundExpression.mysterious)\n            sleep(500)\n            display.show(ojos_cerrados)\n        \n        # Si hay sonido fuerte, despertar\n        if nivel > 120:\n            modo_sueno = False\n            display.show(sonrisa)\n            music.play(soundExpression.jump_up)\n            motor_adelante()\n            sleep(1000)\n            motor_detener()\n            display.show(ojos_neutros)\n            ultimo_sonido = running_time()\n    \n    # Música de fondo aleatoria cada 20-40 segundos\n    if (tiempo_actual - tiempo_fondo) > random.randint(20000, 40000):\n        if not modo_sueno:  # solo si no está dormido\n            sonido_fondo = random.choice(sonidos_fondo)\n            music.play(sonido_fondo)\n            tiempo_fondo = tiempo_actual\n    \n    # Mostrar ojos tristes si hace rato que no hay sonido (pero no dormido)\n    if not modo_sueno and (tiempo_actual - ultimo_sonido) > 5000:  # 5 segundos\n        display.show(ojos_tristes)\n        if (tiempo_actual // 1000) % 6 == 0:  # cada 6 segundos\n            music.play(soundExpression.sad)\n    \n    elif not modo_sueno:\n        display.show(ojos_neutros)\n    \n    sleep(100)  # Evitar saturación"}]},{"timestamp":1754100017063,"editorVersion":"8.0.13","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":247,"length1":44,"diffs":[[1,""]]}]},{"type":"edited","filename":"main.py","patch":[{"start1":36,"length1":14,"diffs":[[1,""]]},{"start1":849,"length1":118,"diffs":[[1,""]]},{"start1":871,"length1":20,"diffs":[[1,""]]},{"start1":896,"length1":0,"diffs":[[1,"    IN2.write_digital(0)\n"]]},{"start1":946,"length1":14,"diffs":[[1,"    IN4.write_digital(0)\n"]]},{"start1":991,"length1":20,"diffs":[[1,"    IN1.write_digital(0)\n"]]},{"start1":1041,"length1":0,"diffs":[[1,"    IN3.write_digital(0)\n"]]},{"start1":1091,"length1":14,"diffs":[[1,""]]},{"start1":1113,"length1":20,"diffs":[[1,""]]},{"start1":1138,"length1":0,"diffs":[[1,"    IN2.write_digital(0)\n    IN3.write_digital(0)\n"]]},{"start1":1213,"length1":14,"diffs":[[1,""]]},{"start1":1237,"length1":20,"diffs":[[1,"    IN1.write_digital(0)\n"]]},{"start1":1312,"length1":14,"diffs":[[1,"    IN4.write_digital(0)\n"]]},{"start1":1459,"length1":58,"diffs":[[1,""]]},{"start1":1489,"length1":115,"diffs":[[1,"sin_sonido = 0          # contador en segundos sin sonido\nultimo_sonido = 0       # tiempo del último sonido detectado\nmodo_sueno = False      # si está \"dormido\"\n"]]},{"start1":1728,"length1":117,"diffs":[[1,"tiempo_fondo = 0        # para música de fondo\n"]]},{"start1":1936,"length1":317,"diffs":[[1,""]]},{"start1":2040,"length1":18,"diffs":[[1,""]]},{"start1":2114,"length1":99,"diffs":[[1,"    nivel = microphone.current_sound_level()\n"]]},{"start1":2164,"length1":69,"diffs":[[1,"    # Si hay sonido fuerte (>100), reaccionar\n    if nivel > 100:\n"]]},{"start1":2269,"length1":0,"diffs":[[1,"        modo_sueno = False\n"]]},{"start1":2305,"length1":506,"diffs":[[1,"        # Mostrar sonrisa\n        display.show(sonrisa)\n"]]},{"start1":2370,"length1":74,"diffs":[[1,"        # Sonido feliz\n        music.play(soundExpression.happy)\n        \n        # Mover robot un momento\n        motor_adelante()\n        sleep(1000)\n        motor_detener()\n        \n        # Volver a ojos neutros\n"]]},{"start1":2707,"length1":135,"diffs":[[1,"    if not modo_sueno and (tiempo_actual - ultimo_sonido) > tiempo_sin_sonido_para_sueno:\n"]]},{"start1":2823,"length1":184,"diffs":[[1,""]]},{"start1":2900,"length1":0,"diffs":[[1,"        sleep(500)\n"]]},{"start1":3219,"length1":0,"diffs":[[1,"        \n        # Si hay sonido fuerte, despertar\n        if nivel > 120:\n            modo_sueno = False\n            display.show(sonrisa)\n            music.play(soundExpression.jump_up)\n            motor_adelante()\n            sleep(1000)\n            motor_detener()\n            display.show(ojos_neutros)\n            ultimo_sonido = running_time()\n"]]},{"start1":3575,"length1":280,"diffs":[[1,"    # Música de fondo aleatoria cada 20-40 segundos\n    if (tiempo_actual - tiempo_fondo) > random.randint(20000, 40000):\n        if not modo_sueno:  # solo si no está dormido\n            sonido_fondo = random.choice(sonidos_fondo)\n            music.play(sonido_fondo)\n            tiempo_fondo = tiempo_actual\n"]]},{"start1":3966,"length1":66,"diffs":[[1,"    if not modo_sueno and (tiempo_actual - ultimo_sonido) > 5000:  # 5 segundos\n"]]},{"start1":4145,"length1":56,"diffs":[[1,"            music.play(soundExpression.sad)\n    \n"]]},{"start1":4259,"length1":173,"diffs":[[1,"    sleep(100)  # Evitar saturación"]]}]},{"type":"added","filename":"test.ts","value":"// aquí va el archivo \"tests\"; esto no se compilará cuando este paquete se utilice como una extensión.\n"}]}],"snapshots":[{"timestamp":1754099462506,"editorVersion":"8.0.13","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Robot\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1754100272946}